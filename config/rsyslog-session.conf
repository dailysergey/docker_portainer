module(load="imudp")
module(load="ompgsql")
module(load="omhiredis")
module(load="omrabbitmq")
module(load="mmdblookup" container="!geoip")
input(type="imudp" port="514" ruleset="rs_session")
# SQL Insert template
template(name="tp_pginsert" type="list" option.stdsql="on"){
        constant(value="INSERT INTO keyjstore (")
        constant(value="ori,orip,received,reported,secret) VALUES ('")
        property(name="hostname")
        constant(value="','")
        property(name="fromhost-ip")
        constant(value="','")
        property(name="timestamp" dateformat="pgsql" date.inUTC="on" )
        constant(value="','")
        property(name="timereported" dateformat="pgsql" date.inUTC="on")
        constant(value="','")
        property(name="!secret")
        constant(value="')")
}

# GeoIP code template
template(name="tp_geoip" type="string"
        string="%$!geoip!sub[0]!geoname_id%")

# RabbitMQ routing key
template(name="tp_routing_key" type="list"){
        property(name="._fromip")
        constant(value=".")
        property(name="._si")
        constant(value=".")
        property(name="._sni")
        constant(value=".")
        property(name="._ci")
        constant(value=".")
        property(name="!secret!rid")
}
# Redis ori from-ip template
template(name="tp_orihostset" type="list"){
        constant(value="SADD ori_hostset ")
        property(name="fromhost-ip")
}
# Redis service unique
template(name="tp_serviceset" type="list"){
        constant(value="SADD orip_")
        property(name="fromhost-ip")
        constant(value=" {\"sni\":\"")
        property(name="!secret!sni")
        constant(value="\",\"si\":\"")
        property(name="!secret!si")
        constant(value="\",\"sp\":")
        property(name="!secret!sp")
        constant(value="}")
}

# Redis service csd unique
template(name="tp_csdset" type="list"){
        constant(value="SADD csd_")
        property(name="!secret!si")
        constant(value="_")
        property(name="!secret!sni")
        constant(value=" ")
        property(name="!secret!csd")
}

# Redis key
template(name="tp_redis_key" type="string" string="%!secret!cr%")

# Redis value
template(name="tp_redis_secret" type="string" string="%!secret%")

template(name="tp_message" type="list"){
        property(name="!secret")
}

template(name="tp_sni" type="list"){
        property(name="!secret!sni")
        constant(value="\n")
}

template(name="tp_wrong_msg" type="list"){
                property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="19")
                constant(value=": ")
                property(name="fromhost-ip")
                constant(value="::")
                property(name="msg")
                constant(value="\n")
}

template(name="tp_wrong_msg_sni" type="list"){
                property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="19")
                constant(value=": ")
                property(name="fromhost-ip")
                constant(value="::")
                property(name="msg")
                constant(value="->")
                property(name="!secret!sni")
                constant(value="\n")
}

template(name="tp_wrong_msg_si" type="list"){
                property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="19")
                constant(value=": ")
                property(name="fromhost-ip")
                constant(value="::")
                property(name="msg")
                constant(value="->")
                property(name="!secret!si")
                constant(value="\n")
}

template(name="tp_wrong_msg_cr" type="list"){
                property(name="timereported" dateFormat="rfc3339" position.from="1" position.to="19")
                constant(value=": ")
                property(name="fromhost-ip")
                constant(value="::")
                property(name="msg")
                constant(value="->")
                property(name="!secret!cr")
                constant(value="\n")
}

template(name="tp_reported_trim"
                type="list") {
                property(name="timereported" dateFormat="rfc3339" date.inUTC="on"  position.from="1" position.to="19")
}

template(name="tp_cr_upper"
                type="list") {
                property(name="!secret!cr" caseConversion="upper")
}

# Rulset for remote session
ruleset(name="rs_session"
        queue.size="100000"
        queue.type="LinkedList"
        queue.workerthreads="20"
        queue.timeoutEnqueue="200"
        queue.filename="in_session_q"
        queue.spoolDirectory="/tmp"
        queue.maxFileSize="64m"
        queue.maxdiskspace="512m")
{
	#*.* :omstdout:
        # debug session write
        #*.* /var/log/session.log
        # disable all save block
        set $.define_save = 1;
        # disable rabbit save block
        set $.define_save_rabbit = 1;
        # disable redis save block
        set $.define_save_redis = 1;
        # diable postgres save block
        set $.define_save_postgres = 1;
        set $.trimmsg = ltrim($msg);
        # eehhh wait json format
        #set $.ret = parse_json($msg,"\$!secret");
        # sni
        set $!secret!sni = field($.trimmsg,32,11);
        # csd
        #set $.csd = field($.trimmsg,32,14);
        #if (re_match($.csd, '^[0-9a-fA-F]{1,4}$') > 0) then {
        #               set $!secret!csd = $.csd;
        #}
        # ci + cip
        set $.ipport = field($.trimmsg,32,6);
        if(strlen($.ipport) > 0) then {
                set $.cp = re_extract($.ipport,':([0-9]+)$',0,1,"");
                if(strlen($.cp) > 0) then {
                                set $.iplen = strlen($.ipport) - strlen($.cp) - 1;
                                set $!secret!ci = substring($.ipport,0,$.iplen);
                                set $!secret!cp = $.cp;
                } else {
                                set $!secret!ci = $.ipport;
                                set $!secret!ci = "80";
                }
        }
        # si + sip
        set $.ipport = field($.trimmsg,32,7);
        if(strlen($.ipport) > 0) then {
                set $.sp = re_extract($.ipport,':([0-9]+)$',0,1,"");
                if(strlen($.sp) > 0) then {
                                set $.iplen = strlen($.ipport) - strlen($.sp) - 1;
                                set $!secret!si = substring($.ipport,0,$.iplen);
                                set $!secret!sp = $.sp;
                } else {
                                set $!secret!si = $.ipport;
                                set $!secret!sp = "80";
                }
        }
        # cr -> toUPPER
        set $!secret!cr = field($.trimmsg,32,9);
        set $!secret!cr = exec_template("tp_cr_upper");
        #other
        set $!secret!sr = field($.trimmsg,32,8);
        set $!secret!mk = field($.trimmsg,32,10);
        set $!secret!sid = field($.trimmsg,32,13);
        set $!secret!rp = exec_template("tp_reported_trim");
        # si + sni is correct
        set $.pk_correct = 0;
        if( strlen($!secret!sni) == 0) then {
                set $.pk_correct = 1;
                set $!secret!sni = "empty";
        } else {
                set $.sni_correct = re_match($!secret!sni,'^[0-9a-zA-Z:\\.-]{3,}$'); #[^\\s]
                if( $.sni_correct == 0) then {
                        set $.pk_correct = 1;
                        *.* /logs/wrong_sni.log;tp_wrong_msg_sni
                        set $!secret!sni = "empty";
                }
        }
        set $.si4_correct = re_match($!secret!si,'^(((25[0-5])|(2[0-4][0-9])|([01]?[0-9][0-9]?))\\.){3}((25[0-5])|(2[0-4][0-9])|([01]?[0-9][0-9]?))$');
        set $.si6_correct = re_match($!secret!si,'((^|:)([0-9a-fA-F]{0,4})){1,8}$'); #[^\\s]
        if( $.si4_correct == 0 and $.si6_correct == 0) then {
                set $.pk_correct = $.pk_correct + 1;
                *.* /var/log/wrong_si.log;tp_wrong_msg_si
                set $!secret!si = "0.0.0.0";
        }
        # cr is correct
        set $.cr_correct = re_match($!secret!cr,'^[0-9a-fA-F]+$');
        if( $.cr_correct == 0) then {
                *.* /logs/wrong_cr.log;tp_wrong_msg
        }
        if($.pk_correct < 2 and $.cr_correct > 0 and $.define_save > 0) then {
                action(type="mmdblookup" mmdbfile="/GeoLite/GeoLite2-City.mmdb"
                        fields=[":sub:!subdivisions"] key="!secret!ci")
                if ($!geoip!sub[0]!geoname_id > 0) then {
                        set $!secret!rid = $!geoip!sub[0]!geoname_id;
                }
                # prepare rabbitmq keys
                set $._fromip = replace($fromhost-ip,".",":");
                set $._si = replace($!secret!si,".",":");
                set $._ci = replace($!secret!ci,".",":");
                set $._sni = replace($!secret!sni,".",":");
                # add session to flow exchange
                if($.define_save_rabbit > 0) then {
                        action(type="omrabbitmq"
                                host="control_rabbitmq" # path to hosta
                                virtual_host="/hosta"
                                user="prorabbit"
                                password="prorabbit"
                                exchange="flow"
                                routing_key_template="tp_routing_key"
                                body_template="tp_message"
                                exchange_type="topic"
                                auto_delete="off"
                                delivery_mode="transient"
                                queue.size="5000"
                                queue.type="Direct"
                                queue.timeoutEnqueue="50")
                }

                if($.define_save_redis > 0) then {
                        action(type="omhiredis"
                                server="control_redis"
                                serverPassword="proredis"
                                serverport="6379"
                                mode="template"
                                template="tp_orihostset"
                                queue.size="5000"
                                queue.type="LinkedList"
                                queue.timeoutEnqueue="50")

                        action(type="omhiredis"
                                server="control_redis"
                                serverPassword="proredis"
                                serverport="6379"
                                mode="template"
                                template="tp_serviceset"
                                queue.size="5000"
                                queue.type="LinkedList"
                                queue.timeoutEnqueue="50")

                        if (strlen($!secret!csd) > 0) then {
                                action(type="omhiredis"
                                server="control_redis"
                                serverPassword="proredis"
                                serverport="6379"
                                mode="template"
                                template="tp_csdset"
                                queue.size="5000"
                                queue.type="LinkedList"
                                queue.timeoutEnqueue="50")
                        }

                        action(type="omhiredis"
                                server="control_redis"
                                serverPassword="proredis"
                                serverport="6379"
                                mode="set"
                                template="tp_redis_secret"
                                key="tp_redis_key"
                                dynakey="on"
                                expired="900"
                                queue.size="5000"
                                queue.type="LinkedList"
                                queue.timeoutEnqueue="50")
                }
                if($.define_save_postgres > 0) then {
                        action( type="ompgsql"
                                server="vori_postgres-session"
                                user="postgres"
                                pass="postgres"
                                db="postgres"
                                queue.filename="in_postgres_q"
                                queue.spoolDirectory="/tmp"
                                queue.maxFileSize="64m"
                                queue.maxdiskspace="512m"
                                queue.size="100000"
                                queue.type="linkedList"
                                queue.timeoutEnqueue="1000"
                                template="tp_pginsert")
                }
        }
}
